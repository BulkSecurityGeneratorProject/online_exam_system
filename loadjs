'use strict'
Promise = require './promise'
debug = require('debug') 'engine:loadJS'
loadJSConfig = require './loadJSConfig'

class LoadJS
  constructor: ->
    @loaded = {}

    @promise = new Promise(
      ->
    )

  load: ->
    self = this
    args  = Array.prototype.slice.call(arguments, 0)
    url = args.splice 0, 1
    debug url
    prom  = self.loadFile url
    if args.length > 0
      if self.loaded[url]
        self.load args...
      else
        prom.then (result) ->
          self.load args...
    else
      prom.then (result) =>
        debug 'loadedJS: ', @loaded
        @promise = Promise.delay 0, @loaded

  loadFile: (url) ->
    self = this
    promise = new Promise((resolve, reject) ->
      if self.loaded[url] != undefined
        return resolve 'loaded'

      # Adding the script tag to the head as suggested before
      head = document.getElementsByTagName('head')[0]
      script = document.createElement('script')
      script.type = 'text/javascript'
      script.src = url
      # Then bind the event to the callback function.
      # There are several events for cross browser compatibility.

      # TODO add error event for script
      script.onreadystatechange = (status) ->
        debug status
        self.loaded[url] = true
        resolve 'onreadystatechange'

      script.onload = (result) ->
        debug result
        self.loaded[url] = true
        resolve 'onload'

      head.appendChild script
    )

  loadByOption: (options) ->
    extendJSPaths = []
    for name, paths of loadJSConfig
      extendJSPaths = (path for path in paths)  if options[name]

    debug '开始加载扩展包' + extendJSPaths if extendJSPaths[0]?
    @load extendJSPaths...

  loadByModule: (moduleName) ->
    extendJSPaths = []
    extendJSPaths = (path for path in loadJSConfig[moduleName])  if loadJSConfig[moduleName]
    debug '开始加载扩展包' + extendJSPaths if extendJSPaths[0]?
    @load extendJSPaths...

module.exports = new LoadJS()
